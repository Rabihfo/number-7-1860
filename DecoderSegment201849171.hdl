CHIP DecoderSegment201849171 {
    IN A, B, C, D;
    OUT d;

    PARTS:
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    And(a=notA, b=notB, out=t1);
    And(a=t1, b=notC, out=t1b);
    And(a=t1b, b=notD, out=m0); // digit 0

    And(a=notA, b=notB, out=t2);
    And(a=t2, b=C, out=t2b);
    And(a=t2b, b=notD, out=m2); // digit 2

    And(a=notA, b=notB, out=t3);
    And(a=t3, b=C, out=t3b);
    And(a=t3b, b=D, out=m3); // digit 3

    And(a=notA, b=B, out=t4);
    And(a=t4, b=notC, out=t4b);
    And(a=t4b, b=D, out=m5); // digit 5

    And(a=notA, b=B, out=t5);
    And(a=t5, b=C, out=t5b);
    And(a=t5b, b=notD, out=m6); // digit 6

    And(a=A, b=notB, out=t6);
    And(a=t6, b=notC, out=t6b);
    And(a=t6b, b=notD, out=m8); // digit 8

    And(a=A, b=notB, out=t7);
    And(a=t7, b=notC, out=t7b);
    And(a=t7b, b=D, out=m9); // digit 9

    Or(a=m0, b=m2, out=o1);
    Or(a=o1, b=m3, out=o2);
    Or(a=o2, b=m5, out=o3);
    Or(a=o3, b=m6, out=o4);
    Or(a=o4, b=m8, out=o5);
    Or(a=o5, b=m9, out=d);
}
